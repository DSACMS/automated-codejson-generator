{
  "version": 3,
  "sources": ["../dist-src/value-to-tree-object.js", "../dist-src/constants.js", "../dist-src/create-tree.js", "../dist-src/create-commit.js", "../dist-src/compose-create-pull-request.js", "../dist-src/version.js", "../dist-src/index.js"],
  "sourcesContent": ["async function valueToTreeObject(octokit, owner, repo, path, value) {\n  const defaultMode = \"100644\";\n  if (typeof value === \"string\") {\n    return {\n      path,\n      mode: defaultMode,\n      content: value\n    };\n  }\n  const mode = value.mode ?? defaultMode;\n  if (value.encoding === \"utf-8\") {\n    return {\n      path,\n      mode,\n      content: value.content\n    };\n  }\n  const { data } = await octokit.request(\n    \"POST /repos/{owner}/{repo}/git/blobs\",\n    {\n      owner,\n      repo,\n      ...value\n    }\n  );\n  const blobSha = data.sha;\n  return {\n    path,\n    mode,\n    sha: blobSha\n  };\n}\nexport {\n  valueToTreeObject\n};\n", "const DELETE_FILE = Symbol(\"DELETE_FILE\");\nexport {\n  DELETE_FILE\n};\n", "import { valueToTreeObject } from \"./value-to-tree-object.js\";\nimport { DELETE_FILE } from \"./constants.js\";\nasync function createTree(state, changes) {\n  const {\n    octokit,\n    owner,\n    repo,\n    ownerOrFork,\n    latestCommitSha,\n    latestCommitTreeSha\n  } = state;\n  let tree = [];\n  for (const path of Object.keys(changes.files)) {\n    const value = changes.files[path];\n    if (value === DELETE_FILE) {\n      try {\n        await octokit.request(\"HEAD /repos/{owner}/{repo}/contents/:path\", {\n          owner: ownerOrFork,\n          repo,\n          ref: latestCommitSha,\n          path\n        });\n        tree.push({\n          path,\n          mode: \"100644\",\n          sha: null\n        });\n        continue;\n      } catch (error) {\n        continue;\n      }\n    }\n    if (typeof value === \"function\") {\n      let result;\n      try {\n        const { data: file } = await octokit.request(\n          \"GET /repos/{owner}/{repo}/contents/:path\",\n          {\n            owner: ownerOrFork,\n            repo,\n            ref: latestCommitSha,\n            path\n          }\n        );\n        result = await value(\n          Object.assign(file, { exists: true })\n        );\n        if (result === DELETE_FILE) {\n          try {\n            await octokit.request(\"HEAD /repos/{owner}/{repo}/contents/:path\", {\n              owner: ownerOrFork,\n              repo,\n              ref: latestCommitSha,\n              path\n            });\n            tree.push({\n              path,\n              mode: \"100644\",\n              sha: null\n            });\n            continue;\n          } catch (error) {\n            continue;\n          }\n        }\n      } catch (error) {\n        if (error.status !== 404) throw error;\n        result = await value({ exists: false });\n      }\n      if (result === null || typeof result === \"undefined\" || typeof result === \"symbol\") {\n        continue;\n      }\n      tree.push(\n        // @ts-expect-error - Argument result can never be of type Symbol at this branch\n        // because the above condition will catch it and move on to the next iteration cycle\n        await valueToTreeObject(octokit, ownerOrFork, repo, path, result)\n      );\n      continue;\n    }\n    tree.push(await valueToTreeObject(octokit, ownerOrFork, repo, path, value));\n    continue;\n  }\n  tree = tree.filter(Boolean);\n  if (tree.length === 0) {\n    return null;\n  }\n  const {\n    data: { sha: newTreeSha }\n  } = await octokit.request(\"POST /repos/{owner}/{repo}/git/trees\", {\n    owner: ownerOrFork,\n    repo,\n    base_tree: latestCommitTreeSha,\n    tree\n  });\n  return newTreeSha;\n}\nexport {\n  createTree\n};\n", "async function createCommit(state, treeCreated, changes) {\n  const { octokit, repo, ownerOrFork, latestCommitSha } = state;\n  const message = treeCreated ? changes.commit : typeof changes.emptyCommit === \"string\" ? changes.emptyCommit : changes.commit;\n  const commit = {\n    message,\n    author: changes.author,\n    committer: changes.committer,\n    tree: state.latestCommitTreeSha,\n    parents: [latestCommitSha]\n  };\n  const { data: latestCommit } = await octokit.request(\n    \"POST /repos/{owner}/{repo}/git/commits\",\n    {\n      owner: ownerOrFork,\n      repo,\n      ...commit,\n      signature: changes.signature ? await changes.signature(commit) : void 0\n    }\n  );\n  return latestCommit.sha;\n}\nexport {\n  createCommit\n};\n", "import { createTree } from \"./create-tree.js\";\nimport { createCommit } from \"./create-commit.js\";\nasync function composeCreatePullRequest(octokit, {\n  owner,\n  repo,\n  title,\n  body,\n  base,\n  head,\n  createWhenEmpty,\n  changes: changesOption,\n  draft = false,\n  labels = [],\n  forceFork = false,\n  update = false\n}) {\n  if (head === base) {\n    throw new Error(\n      '[octokit-plugin-create-pull-request] \"head\" cannot be the same value as \"base\"'\n    );\n  }\n  const changes = Array.isArray(changesOption) ? changesOption : [changesOption];\n  if (changes.length === 0)\n    throw new Error(\n      '[octokit-plugin-create-pull-request] \"changes\" cannot be an empty array'\n    );\n  const state = { octokit, owner, repo };\n  const { data: repository, headers } = await octokit.request(\n    \"GET /repos/{owner}/{repo}\",\n    {\n      owner,\n      repo\n    }\n  );\n  const isUser = !!headers[\"x-oauth-scopes\"];\n  if (!repository.permissions) {\n    throw new Error(\n      \"[octokit-plugin-create-pull-request] Missing authentication\"\n    );\n  }\n  if (!base) {\n    base = repository.default_branch;\n  }\n  state.ownerOrFork = owner;\n  if (forceFork || isUser && !repository.permissions.push) {\n    const user = await octokit.request(\"GET /user\");\n    const forks = await octokit.request(\"GET /repos/{owner}/{repo}/forks\", {\n      owner,\n      repo\n    });\n    const hasFork = forks.data.find(\n      /* v8 ignore next - fork owner can be null, but we don't test that */\n      (fork) => fork.owner && fork.owner.login === user.data.login\n    );\n    if (!hasFork) {\n      await octokit.request(\"POST /repos/{owner}/{repo}/forks\", {\n        owner,\n        repo\n      });\n    }\n    state.ownerOrFork = user.data.login;\n  }\n  const {\n    data: [latestCommit]\n  } = await octokit.request(\"GET /repos/{owner}/{repo}/commits\", {\n    owner,\n    repo,\n    sha: base,\n    per_page: 1\n  });\n  state.latestCommitSha = latestCommit.sha;\n  state.latestCommitTreeSha = latestCommit.commit.tree.sha;\n  const baseCommitTreeSha = latestCommit.commit.tree.sha;\n  for (const change of changes) {\n    let treeCreated = false;\n    if (change.files && Object.keys(change.files).length) {\n      const latestCommitTreeSha = await createTree(\n        state,\n        change\n      );\n      if (latestCommitTreeSha) {\n        state.latestCommitTreeSha = latestCommitTreeSha;\n        treeCreated = true;\n      }\n    }\n    if (treeCreated || change.emptyCommit !== false) {\n      state.latestCommitSha = await createCommit(\n        state,\n        treeCreated,\n        change\n      );\n    }\n  }\n  const hasNoChanges = baseCommitTreeSha === state.latestCommitTreeSha;\n  if (hasNoChanges && createWhenEmpty === false) {\n    return null;\n  }\n  const branchInfo = await octokit.graphql(\n    `\n    query ($owner: String!, $repo: String!, $head: String!) {\n      repository(name: $repo, owner: $owner) {\n        ref(qualifiedName: $head) {\n          associatedPullRequests(first: 1, states: OPEN) {\n            edges {\n              node {\n                id\n                number\n                url\n              }\n            }\n          }\n        }\n      }\n    }`,\n    {\n      owner: state.ownerOrFork,\n      repo,\n      head\n    }\n  );\n  const branchExists = !!branchInfo.repository.ref;\n  const existingPullRequest = branchInfo.repository.ref?.associatedPullRequests?.edges?.[0]?.node;\n  if (existingPullRequest && !update) {\n    throw new Error(\n      `[octokit-plugin-create-pull-request] Pull request already exists: ${existingPullRequest.url}. Set update=true to enable updating`\n    );\n  }\n  if (branchExists) {\n    await octokit.request(\"PATCH /repos/{owner}/{repo}/git/refs/{ref}\", {\n      owner: state.ownerOrFork,\n      repo,\n      sha: state.latestCommitSha,\n      ref: `heads/${head}`,\n      force: true\n    });\n  } else {\n    await octokit.request(\"POST /repos/{owner}/{repo}/git/refs\", {\n      owner: state.ownerOrFork,\n      repo,\n      sha: state.latestCommitSha,\n      ref: `refs/heads/${head}`\n    });\n  }\n  const pullRequestOptions = {\n    owner,\n    repo,\n    head: `${state.ownerOrFork}:${head}`,\n    base,\n    title,\n    body,\n    draft\n  };\n  let res;\n  if (existingPullRequest) {\n    res = await octokit.request(\n      \"PATCH /repos/{owner}/{repo}/pulls/{pull_number}\",\n      {\n        pull_number: existingPullRequest.number,\n        ...pullRequestOptions\n      }\n    );\n  } else {\n    res = await octokit.request(\n      \"POST /repos/{owner}/{repo}/pulls\",\n      pullRequestOptions\n    );\n  }\n  if (labels.length) {\n    try {\n      const labelRes = await octokit.request(\n        \"POST /repos/{owner}/{repo}/issues/{number}/labels\",\n        {\n          owner,\n          repo,\n          number: res.data.number,\n          labels\n        }\n      );\n      if (labelRes.data.length > labels.length) {\n        octokit.log.warn(\n          \"The pull request already contains more labels than the ones provided. This could be due to the presence of previous labels.\"\n        );\n      }\n    } catch (error) {\n      if (error.status === 403) {\n        octokit.log.warn(\n          \"You do not have permissions to apply labels to this pull request. However, the pull request has been successfully created without the requested labels.\"\n        );\n        return res;\n      }\n      if (error.status !== 403) throw error;\n    }\n  }\n  return res;\n}\nexport {\n  composeCreatePullRequest\n};\n", "const VERSION = \"0.0.0-development\";\nexport {\n  VERSION\n};\n", "import { composeCreatePullRequest } from \"./compose-create-pull-request.js\";\nimport { VERSION } from \"./version.js\";\nimport { DELETE_FILE } from \"./constants.js\";\nfunction createPullRequest(octokit) {\n  return {\n    createPullRequest: composeCreatePullRequest.bind(null, octokit)\n  };\n}\nimport { composeCreatePullRequest as composeCreatePullRequest2 } from \"./compose-create-pull-request.js\";\ncreatePullRequest.VERSION = VERSION;\nexport {\n  DELETE_FILE,\n  composeCreatePullRequest2 as composeCreatePullRequest,\n  createPullRequest\n};\n"],
  "mappings": "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",
  "names": []
}
